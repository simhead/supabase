# - name: Check if jwt_anonKey and jwt_serviceKey are empty
#   command: echo
#   register: jwt_keys_check

# - name: Copy the JWT generation script to the target machine
#   template:
#     src: generate_jwt_keys.j2
#     dest: /tmp/generate_jwt_keys.sh
#     mode: '0755'

# - name: Run the JWT generation script if keys are empty
#   shell: /tmp/generate_jwt_keys.sh
#   register: jwt_keys_output
#   when: jwt_keys_check.stdout.find('jwt_anonKey') == -1 or jwt_keys_check.stdout.find('jwt_serviceKey') == -1

# - name: Parse the generated keys and set facts
#   set_fact:
#     jwt_anonKey: "{{ jwt_keys_output.stdout_lines | select('search', 'jwt_anonKey') | first | regex_replace('jwt_anonKey=', '') }}"
#     jwt_serviceKey: "{{ jwt_keys_output.stdout_lines | select('search', 'jwt_serviceKey') | first | regex_replace('jwt_serviceKey=', '') }}"
#   when: jwt_keys_output is defined

- name: Check if jwt_anonKey and jwt_serviceKey are defined or empty
  set_fact:
    jwt_anonKey: "{{ jwt_anonKey if jwt_anonKey is defined else '' }}"
    jwt_serviceKey: "{{ jwt_serviceKey if jwt_serviceKey is defined else '' }}"

- name: PRE - Debug the generated keys
  debug:
    msg:
      - "jwt_anonKey: {{ jwt_anonKey }}"
      - "jwt_serviceKey: {{ jwt_serviceKey }}"

- name: Copy the JWT generation script to the target machine
  template:
    src: generate_jwt_keys.j2
    dest: /tmp/generate_jwt_keys.sh
    mode: '0755'

- name: Run the JWT generation script if keys are empty
  shell: /tmp/generate_jwt_keys.sh
  register: jwt_keys_output
  when: jwt_anonKey == '' or jwt_serviceKey == ''

- name: Parse the generated keys and update facts
  set_fact:
    jwt_anonKey: "{{ jwt_keys_output.stdout_lines | select('search', 'jwt_anonKey') | first | regex_replace('jwt_anonKey=', '') }}"
    jwt_serviceKey: "{{ jwt_keys_output.stdout_lines | select('search', 'jwt_serviceKey') | first | regex_replace('jwt_serviceKey=', '') }}"
    jwt_secret: "{{ jwt_keys_output.stdout_lines | select('search', 'jwt_secret') | first | regex_replace('jwt_secret=', '') }}"
  when: jwt_keys_output.stdout_lines is defined and jwt_keys_output.stdout_lines | length > 0

- name: POST - Debug the generated keys
  debug:
    msg:
      - "jwt_anonKey: {{ jwt_anonKey }}"
      - "jwt_serviceKey: {{ jwt_serviceKey }}"
      - "jwt_secret: {{ jwt_secret }}"

- name: Clone Supabase Kubernetes repository
  git:
    repo: https://github.com/supabase-community/supabase-kubernetes
    dest: /root/supabase/github

- name: Change to the charts directory
  shell: |
    cd /root/supabase/github/charts/supabase && pwd
  register: supabase_chart_dir
  changed_when: false

- name: Define supabase helm values.yaml for deployment
  template:
    src: "values.oke.yaml.j2"
    dest: "/root/supabase/values.oke.yaml"
    mode: '0755'

- name: Define supabase helm values.yaml for deployment using external DB
  template:
    src: "values.oke.extdb.yaml.j2"
    dest: "/root/supabase/values.oke.extdb.yaml"
    mode: '0755'

- name: Check if Helm release exists
  shell: helm list -n {{ supabase_namespace }} --filter "^supabase-app$" -q
  register: helm_release_check
  failed_when: false
  changed_when: false  # No change if it's just checking for the release

- name: Print the value of postgres_host
  debug:
    msg: "The value of postgres_host is: '{{ postgres_host }}'"

- name: Determine which Helm values file to use
  set_fact:
    helm_values_file: >
      {% if postgres_host | length == 0 %}
      /root/supabase/values.oke.yaml
      {% else %}
      /root/supabase/values.oke.yaml
      {% endif %}

- name: Print the chosen Helm values file
  debug:
    msg: "The chosen Helm values file is: '{{ helm_values_file }}'"
    
- name: Install supabase-app Helm release
  shell: |
    cd /root/supabase/github/charts/supabase
    helm uninstall supabase-app -n {{ supabase_namespace }}
    sleep 30s
    helm install supabase-app -n {{ supabase_namespace }} -f /root/supabase/values.oke.yaml .
  # when: helm_release_check.stdout == ''
  # register: helm_install_output

# - name: Upgrade supabase-app Helm release
#   shell: |
#     cd /root/supabase/github/charts/supabase
#     helm upgrade supabase-app -n {{ supabase_namespace }} -f /root/supabase/values.oke.yaml .
#   when: helm_release_check.stdout != ''
#   register: helm_upgrade_output

- name: Debug message for Helm release status
  debug:
    msg: >
      {% if helm_release_check.stdout == '' %}
        The supabase-app Helm release was successfully installed.
      {% else %}
        The supabase-app Helm release was successfully upgraded.
      {% endif %}

# - name: Run MinIO client Pod
#   shell: |
#     kubectl run minio-client --namespace={{ supabase_namespace }} --image=minio/mc:latest
#     --command -- "sleep 3600"
#   register: run_minio_client_result
#   failed_when: "'AlreadyExists' not in run_minio_client_result.stderr"
#   changed_when: "'AlreadyExists' not in run_minio_client_result.stderr"

# - name: Wait for the MinIO client Pod to be ready
#   shell: |
#     kubectl wait --namespace={{ supabase_namespace }} --for=condition=Ready pod/minio-client --timeout=60s
#   register: wait_minio_client_result
#   failed_when: "'condition met' not in wait_minio_client_result.stdout"

# - name: Set MinIO alias
#   shell: |
#     kubectl exec --namespace={{ supabase_namespace }} -it minio-client -- "mc alias set myminio http://supabase-app-supabase-minio:9000 keyId accessKey"
